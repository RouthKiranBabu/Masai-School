https://students.masaischool.com/lectures/91802?tab=notes
1. Which one is smaller:
	f1(n) = n
	f2(n) = (log2(n))^100
Solution. let n = 2^1024
f1(n) = 2^1024
f2(n) = (log2(2^1024))^100 = 1024 * 100 = (2^10) * 100 = 2^1000
finally, f2(n) < f1(n).

>Find the time complexity of the solution:
>>Big-Oh[O()] (also known as Order of) -
1. Big-Oh notation represents the upper bound of the running time of an algorithm.
	Therefore, it gives the worse-case complexity of an algorithm.
2. It returns the highest possible output value (big-Oh) for a given input.
3. It is representation of the time complexity.
	Example: O(n^2) can be read as
		the Order of n square OR Big-Oh of n-square
Example: f(n) = 2*(n^2) + 2n + 4. find O(g(n))?
Solution: Highest term is 2*(n^2) => O(n^2) (2 as O)
finally, O(g(n)) = O(g(n)).

Example 1: f(n) = 2*(n^2) + 2n + 4. find O(g(n))?
Solution: Highest term is 2*(n^2) => O(n^2) (2 as O)
finally, O(g(n)) = O(n^2).

Example 2: f(n) = 3*(n^2) + 2*(n^3) + 2n + 4. find O(g(n))?
Solution: Highest term is 2*(n^3) => O(n^3) (2 as O)
finally, O(g(n)) = O(n^3).

Constant operations - includes
1. Print statements
2. If-else condition
3. break
4. Increment\Decrement statement
5. Continue
6. Return
Their time complexity is always O(1)

Time complexity for the for loop:
for(let i = 0; i < n; i++){
	console.log("*")
}
for(let i = 0; i < n; i++){ <= O(1(for i = 0) + (n + 1)(for i < n) + n(for i++) + 1(for console.log()))
So finally => (1 + n + 1 + n + 1) = O(2n + 3)
After ignoring the constant => finally we have
Time complexity for the for loop is O(n).

2. 	for(let i = 0; i < n; i ++){		\\ n times
		for(let j = 0; j < n/2; j ++){	\\ n/2 times
			console.log("")		\\ constant => O(1)
		}
	}
O(n * n\2) => O(n ^ 2)

3. 	for(let i = 0; i < n; i ++){			\\ n times
		for(let j = 0; j < n/4; j ++){		\\ n/4 times
			for(let k = 0; k < n; k ++){	\\ n times
				console.log("*")
			}
		}
	}
O(n * n/4 * n) => O(n^3)